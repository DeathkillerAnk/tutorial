Step 1 : Check if git is already installed.
 terminal - git --version
Step 2 : Download and install git
 https://git-scm.com/download/mac
Step 3 : Signup and create a account on GitHub
 https://github.com/
Step 4 : Add your github email and username to git
 git config --global user.email "yourGitHub@email.com"
 git config --global user.name "yourGitHubusername"
Step 5 : Add file/folders to git - tracking
Step 6 : Commands
 - terminal - goto the location of the folder/project
 - git init
 - git status
 - git add
 - git commit -m “…..”
 - git remote add origin “location of remote repo”
 - git push -u origin master
 - git log
 - git --help


............Branching....


Step 1 : Create branch
 git branch “branch name”
Step 2 : Checkout branch
 git checkout “branch name”
Step 3 : Merge new branch in master branch
 git merge “branch name”
Step 4 : Delete branch
 git branch -d “branch name” — delete from local
 git push origin —delete “branch name” — delete from remote


////////////git tags............


Step 1:
Checkout the branch where you want to create the tag
git checkout "branch name"
example : git checkout master
________________________________________________________
Step 2:
Create tag with some name
git tag "tag name"
example : git tag v1.0
git tag -a v1.0 -m "ver 1 of .." (to create annotated tags)
________________________________________________________
Step 3:
Display or Show tags
git tag
git show v1.0
git tag -l “v1.*”
________________________________________________________
Step 4:
Push tags to remote
git push origin v1.0
git push origin --tags
git push --tags
(to push all tags at once)
________________________________________________________
Step 5:
Delete tags (if required only)
to delete tags from local :
git tag -d v1.0
git tag --delete v1.0
to delete tags from remote :
git push origin -d v1.0
git push origin --delete v1.0
git push origin :v1.0
to delete multiple tags at once:
git tag -d v1.0 v1.1 (local)
git push origin -d v1.0 v1.1 (remote)
________________________________________________________
Checking out TAGS
We cannot checkout tags in git
We can create a branch from a tag and checkout the branch
git checkout -b "branch name" "tag name"
example : git checkout -b ReleaseVer1 v1.0
________________________________________________________
Creating TAGS from past commits
git tag "tag name" "reference of commit"
example : git tag v1.2 5fcdb03
===================================================

///////////git remote .........

Viewing git remote configurations
git remote
List the remote connections you have to other repositories.

git remote -v
Same as the above command, but include the URL of each connection.

Creating and modifying git remote configurations
The git remote command is also a convenience or 'helper' method for modifying a repo's ./.git/config file. The commands presented below let you manage connections with other repositories. The following commands will modify the repo's /.git/config file. The result of the following commands can also be achieved by directly editing the ./.git/config file with a text editor.

git remote add <name> <url>
Create a new connection to a remote repository. After adding a remote, you’ll be able to use <name> as a convenient shortcut for <url> in other Git commands.

git remote rm <name>
Remove the connection to the remote repository called <name>.

git remote rename <old-name> <new-name>
Rename a remote connection from <old-name> to <new-name>.

GET-URL <NAME>
Outputs the URLs for a remote record.

Accepts --push, push URLs are queried rather than fetch URLs.

With --all, all URLs for the remote will be listed.

SHOW <NAME>
Outputs high-level information about the remote <NAME>.

PRUNE <NAME>
Deletes any local branches for <NAME> that are not present on the remote repository.

Accepts a --dry-run option which will list what branches are set to be pruned, but will not actually prune them.



////////////git fetch.........

Git fetch commands and options
git fetch <remote>
Fetch all of the branches from the repository. This also downloads all of the required commits and files from the other repository.

git fetch <remote> <branch>
Same as the above command, but only fetch the specified branch.

git fetch --all
A power move which fetches all registered remotes and their branches:

git fetch --dry-run
The --dry-run option will perform a demo run of the command. I will output examples of actions it will take during the fetch but not apply them.



//////////git push...........

Git push usage
git push <remote> <branch>
Push the specified branch to <remote>, along with all of the necessary commits and internal objects. This creates a local branch in the destination repository. To prevent you from overwriting commits, Git won’t let you push when it results in a non-fast-forward merge in the destination repository.

git push <remote> --force
Same as the above command, but force the push even if it results in a non-fast-forward merge. Do not use the --force flag unless you’re absolutely sure you know what you’re doing.

git push <remote> --all
Push all of your local branches to the specified remote.

git push <remote> --tags
Tags are not automatically pushed when you push a branch or use the --all option. The --tags flag sends all of your local tags to the remote repository.





////////////git pull...............
Common Options
git pull <remote>
Fetch the specified remote’s copy of the current branch and immediately merge it into the local copy. This is the same as git fetch <remote> followed by git merge origin/<current-branch>.

git pull --no-commit <remote>
Similar to the default invocation, fetches the remote content but does not create a new merge commit.

git pull --rebase <remote>
Same as the previous pull Instead of using git merge to integrate the remote branch with the local one, use git rebase.

git pull --verbose
Gives verbose output during a pull which displays the content being downloaded and the merge details.
